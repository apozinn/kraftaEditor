{
    "name": "c++",
    "icon_file_name": "cpp",
    "file_patterns": [
        "cpp",
        "hpp",
        "cc",
        "h"
    ],
    "lexer_id": 3,
    "lexer_settings": {
        "tab_width": 4,
        "use_spaces": false
    },
    "syntax": {
        "keyword_lists": {
            "0": "alignas alignof and and_eq asm auto bitand bitor bool break case catch char class compl const constexpr const_cast continue decltype default delete do double dynamic_cast else enum explicit export extern false final for friend goto if inline mutable namespace new noexcept not not_eq nullptr operator or or_eq override private protected public register reinterpret_cast requires return static static_assert static_cast struct switch template this thread_local throw true try typedef typeid typename union unsigned using virtual void volatile while xor xor_eq",
            "1": "#include #define #ifdef #ifndef #endif #else #elif #pragma",
            "2": "std cout cin endl string vector map"
        }
    },
    "fold": {
        "enabled": true,
        "preprocessor": true,
        "compact": true
    }
}